// no error
let message = "hello";
message = 123456; // 동적 타입(dynamically typed)
//------------------------------------------------------------------------------

let n = 123; // 정수
n = 12.345; // 부동소수점 숫자
//------------------------------------------------------------------------------
alert( 1 / 0 ); // 무한대
alert(Infinity); // 무한대, 직접 참조할 수도 있습니다.
//------------------------------------------------------------------------------
alert("숫자가 아님" / 2 ); // NaN, 문자열을 숫자로 나누어 오류가 발생합니다.
alert("숫자가 아님" / 2 + 5 ); // NaN, 연산 과정 어디에선가 NaN이 반환되었다면, 이는 모든 결과에 영향을 미칩니다.
//------------------------------------------------------------------------------
const bigInt = 1234567890123456789012345678901234567890n; // BigInt형 값은 정수 리터럴 끝에 n을 붙이면 만들 수 있습니다.
//------------------------------------------------------------------------------
let str = "Hello"; // 큰따옴표
let str2 = 'Single quotes are ok too'; // 작은따옴표
let phrase = `can embed another ${str}`; // 역 따옴표(백틱, backtick)
//------------------------------------------------------------------------------
let name = "John";

// 변수를 문자열 중간에 삽입
alert( `Hello, ${name}!` ); // Hello, John!

// 표현식을 문자열 중간에 삽입
alert( `the result is ${1 + 2}` ); // the result is 3
//------------------------------------------------------------------------------
let nameFieldChecked = true; // 네, name field가 확인되었습니다(checked).
let ageFieldChecked = false; // 아니요, age field를 확인하지 않았습니다(not checked)
let isGreater = 4 > 1;
alert( isGreater ); // true (비교 결과: "yes")
//------------------------------------------------------------------------------
let age = null; // 나이(age)를 알 수 없거나 그 값이 비어있음
//------------------------------------------------------------------------------
let age;

alert(age); // 'undefined'가 출력됩니다.

//------------------------------------------------------------------------------
let user = new Object(); // '객체 생성자' 문법
let user = {};  // '객체 리터럴' 문법
//------------------------------------------------------------------------------
//typeof 연산자는 두 가지 형태의 문법을 지원합니다. 
// 연산자: typeof x
// 함수: typeof(x), 괄호가 있든 없든 결과가 동일합니다. typeof x를 호출하면 인수의 자료형을 나타내는 문자열을 반환합니다.
typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"  (1)
typeof null // "object"  (2)
typeof alert // "function"  (3)
//------------------------------------------------------------------------------
